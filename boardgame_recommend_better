import time
class Game_List:
    def __init__(self):
        self.game_dict = {}
        self.type_dict = {}
        self.mech_dict = {}
        self.max_player_count = 0
    
    def add_new_game(self, game_name, player_count, type=[], mechanism=[]):
        self.game_dict[game_name] = [player_count, type, mechanism]
        self.update_types(game_name)
        self.update_mechs(game_name)
        self.max_player_count = self.update_max_player_count(self.game_dict)

    def update_types(self, game):
        for t in range(len(self.game_dict[game][1])):
            try:
                if self.type_dict[self.game_dict[game][1][t].lower()] is not None:
                    lister = self.type_dict[self.game_dict[game][1][t].lower()]
                    lister.append(game)
                    self.type_dict[self.game_dict[game][1][t].lower()] = lister

            except KeyError:
                self.type_dict[self.game_dict[game][1][t].lower()] = [game]

    def update_mechs(self, game):
        for t in range(len(self.game_dict[game][2])):
            try:
                if self.mech_dict[self.game_dict[game][2][t].lower()] is not None:
                    lister = self.mech_dict[self.game_dict[game][2][t].lower()]
                    lister.append(game)
                    self.mech_dict[self.game_dict[game][2][t].lower()] = lister

            except KeyError:
                self.mech_dict[self.game_dict[game][2][t].lower()] = [game]
    def update_max_player_count(self, dictionary):
        player_number_list = []
        for i in dictionary:
            player_number_list.append(dictionary[i][0])
        maximum = max(player_number_list)
        return maximum

#coop
coop_games = Game_List()
coop_games.add_new_game("Gloomhaven", 4, ["Strategy", "Thematic"], ["Campaign", "Hand Management"])
coop_games.add_new_game("Spirit Island", 4, ["Strategy", "Thematic"], ["Hand Management"])
coop_games.add_new_game("Pandemic", 4, ["Strategy", "Family"], ["Hand Management"])
coop_games.add_new_game("Arkham Horror: The Card Game", 4, ["Thematic"], ["Campaign", "Hand Management"])
coop_games.add_new_game("Too Many Bones", 4, ["Strategy", "Thematic"], ["Campaign", "Dice Rolling"])

#comp
comp_games = Game_List()
comp_games.add_new_game("Brass: Birmingham", 4, ["Strategy"], ["Hand Management", "Income"])
comp_games.add_new_game("Ark Nova", 4, ["Strategy"], ["Hand Management", "Income"])
comp_games.add_new_game("Twilight Imperium", 6, ["Strategy", "Thematic"], ["Area Control", "Dice Rolling"])
comp_games.add_new_game("Terraforming Mars", 5, ["Strategy"], ["Hand Management", "Income"])
comp_games.add_new_game("War of the Ring", 4, ["Strategy", "Wargame"], ["Area Control", "Hand Management", "Dice Rolling"])
comp_games.add_new_game("Wingspan", 5, ["Family", "Strategy"], ["Hand Management", "Dice Rolling"])


def coop_rec(game_list):
    counter = 1
    try:
        player_count = int(input("\nPlease enter the number of players you have at your table.  "))

        if player_count > game_list.max_player_count:
            oops = input("\nSorry we have no cooperative games of that size. Would you like to choose a different game? (y/n)  ")
            if oops == 'y':
                return BG_Rec()
            else:
                return
        checker = True
        if player_count <= game_list.max_player_count:
            while checker is True:
                selection = input("\nWould you prefer to choose a game based on the type (thematic, family, etc) or by mechanism (dice rolling, campaign, etc)? Enter 't' for type or 'm' for mechanism  ")
                if selection == 't':
                    checker = False
                    new_checker = True
                    while new_checker is True:
                        option = input(f"\nPlease select one of the following game types: {list(game_list.type_dict.keys())}  ").lower()
                        try:
                            for i in game_list.type_dict[option]:
                                new_checker = False
                                print(f"\n{counter}. {i} is a {game_list.game_dict[i][1]} type of game for up to {game_list.game_dict[i][0]} players. Its main mechanism(s) of play are {game_list.game_dict[i][2]}.")
                                counter += 1
                        except KeyError:
                            print("\nPlease enter a valid response from the list!")


                elif selection == 'm':
                    checker = False
                    new_checker = True
                    while new_checker is True:
                        option = input(f"\nPlease select one of the following game types: {list(game_list.mech_dict.keys())}  ").lower()
                        try:
                            for i in game_list.mech_dict[option]:
                                new_checker = False
                                print(f"\n{counter}. {i} is a {game_list.game_dict[i][1]} type of game for up to {game_list.game_dict[i][0]} players. Its main mechanism(s) of play are {game_list.game_dict[i][2]}.")
                                counter += 1
                        except KeyError:
                            print("\nPlease enter a valid response from the list!")

                else:
                    print("\nPlease enter a valid response! ")
    except ValueError:
        print('\nPlease enter a valid number!')
        coop_rec(game_list)


def comp_rec(game_list):
    counter = 1
    try:
        player_count = int(input("\nPlease enter the number of players you have at your table.  "))

        if player_count > game_list.max_player_count:
            oops = input("\nSorry we have no cooperative games of that size. Would you like to choose a different game? (y/n)  ")
            if oops == 'y':
                return BG_Rec()
            else:
                return
        checker = True
        if player_count <= game_list.max_player_count:
            while checker is True:
                selection = input("\nWould you prefer to choose a game based on the type (thematic, strategy, etc) or by mechanism (dice rolling, campaign, etc)? Enter 't' for type or 'm' for mechanism  ")
                if selection == 't':
                    checker = False
                    new_checker = True
                    while new_checker is True:
                        option = input(f"\nPlease select one of the following game types: {list(game_list.type_dict.keys())}  ").lower()
                        try:
                            for i in game_list.type_dict[option]:
                                new_checker = False
                                print(f"\n{counter}. {i} is a {game_list.game_dict[i][1]} type of game for up to {game_list.game_dict[i][0]} players. Its main mechanism(s) of play are {game_list.game_dict[i][2]}.")
                                counter += 1
                        except KeyError:
                            print("\nPlease enter a valid response from the list!")


                elif selection == 'm':
                    checker = False
                    new_checker = True
                    while new_checker is True:
                        option = input(f"\nPlease select one of the following game types: {list(game_list.mech_dict.keys())}  ").lower()
                        try:
                            for i in game_list.mech_dict[option]:
                                new_checker = False
                                print(f"\n{counter}. {i} is a {game_list.game_dict[i][1]} type of game for up to {game_list.game_dict[i][0]} players. Its main mechanism(s) of play are {game_list.game_dict[i][2]}.")
                                counter += 1
                        except KeyError:
                            print("\nPlease enter a valid response from the list!")

                else:
                    print("\nPlease enter a valid response! ")
    except ValueError:
        print('\nPlease enter a valid number!')
        comp_rec(game_list)




def BG_Rec():
    print("Welcome to the board game recommender!")
    time.sleep(2)
    cc = input("\nTo begin please indicate if you're looking for a competitive or cooperative game (Enter in 'comp' or 'coop')  ")
    if cc == 'comp':
        comp_rec(comp_games)
    elif cc == 'coop':
        coop_rec(coop_games)
    else:
        print("\nPlease enter either 'comp' or 'coop'")
        BG_Rec()
    
    new_game_rec = input("\nWould you like another recommendation? (y/n)  ")
    if new_game_rec == 'y':
         return BG_Rec()
    else:
        return
BG_Rec()